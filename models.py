# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2024-12-30T21:03:20+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AnyUrl, Field, PositiveInt, constr
from pydantic_config import BaseConfigModel


class ApprovalProcessResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    status: Optional[str] = Field('in_progress', title='Status')


class ApprovalProcessResponseSchemaBase(ApprovalProcessResponseSchema):
    pass


class ApprovalProcessStatus(Enum):
    in_progress = 'in_progress'
    approved = 'approved'
    rejected = 'rejected'
    expired = 'expired'
    pending = 'pending'


class ApprovalProcessTemplateResponseSchemaBase(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')


class ApprovalProcessType(Enum):
    model = 'model'
    single_file = 'single_file'
    folder = 'folder'
    multiple = 'multiple'


class ApprovalProcessesFilter(BaseConfigModel):
    approval_process_oids: Optional[List[UUID]] = Field(
        None, title='Approval Process Oids'
    )


class ApprovalProcessesLogsFilter(ApprovalProcessesFilter):
    pass


class ApprovalProcessesScope(Enum):
    incoming = 'incoming'
    outgoing = 'outgoing'
    all = 'all'


class ApprovalStepLogResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    serial_number: int = Field(..., title='Serial Number')
    deadline: Optional[date] = Field(None, title='Deadline')
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    number_of_steps: int = Field(..., title='Number Of Steps')


class ApprovalStepRequest(BaseConfigModel):
    deadline: Optional[date] = Field(None, title='Deadline')
    name: str = Field(..., title='Name')
    minimal_approves_number: Optional[int] = Field(
        None, title='Minimal Approves Number'
    )
    approving_users: Optional[List[UUID]] = Field(None, title='Approving Users')


class ApprovalStepResponseSchemaBase(ApprovalProcessTemplateResponseSchemaBase):
    pass


class ApprovalStepShortResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    serial_number: int = Field(..., title='Serial Number')


class ApprovalTemplateStepRequest(BaseConfigModel):
    name: str = Field(..., title='Name')
    minimal_approves_number: Optional[int] = Field(
        None, title='Minimal Approves Number'
    )
    approving_users: Optional[List[UUID]] = Field(None, title='Approving Users')
    approving_groups: Optional[List[UUID]] = Field(None, title='Approving Groups')


class ApproveAction(Enum):
    approve = 'approve'
    reject = 'reject'
    expire = 'expire'
    cancel = 'cancel'


class BlockFolderRequest(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')


class CameraPositionSchema(BaseConfigModel):
    x: float = Field(..., title='X')
    y: float = Field(..., title='Y')
    z: float = Field(..., title='Z')


class CameraRotationSchema(CameraPositionSchema):
    pass


class CheckBlockFolderResponse(BaseConfigModel):
    folder_oid: UUID = Field(..., title='Folder Oid')
    is_block: bool = Field(..., title='Is Block')


class CheckFileSchema(BaseConfigModel):
    filename: str = Field(..., title='Filename')
    name: str = Field(..., title='Name')
    extension: str = Field(..., title='Extension')


class CheckRoleGroupNameNotExistRequest(BaseConfigModel):
    name: constr(min_length=1, max_length=50) = Field(..., title='Name')


class ContentValidationType(Enum):
    error = 'error'
    ok = 'ok'


class CreateApprovalProcessTemplateRequest(BaseConfigModel):
    name: constr(min_length=1, max_length=50) = Field(..., title='Name')
    description: Optional[constr(min_length=1, max_length=1000)] = Field(
        None, title='Description'
    )
    steps: List[ApprovalTemplateStepRequest] = Field(..., title='Steps')
    move_to_folder_oid: Optional[UUID] = Field(None, title='Move To Folder Oid')


class CreateApprovalStepResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    deadline: Optional[date] = Field(None, title='Deadline')
    minimal_approves_number: Optional[int] = Field(
        None, title='Minimal Approves Number'
    )
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    approving_users: Optional[List[UUID]] = Field(None, title='Approving Users')


class CreateFolderRequest(BaseConfigModel):
    oid: Optional[UUID] = Field(None, title='Oid')
    name: str = Field(..., title='Name')
    parent_folder_oid: Optional[UUID] = Field(None, title='Parent Folder Oid')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    child_folders: Optional[List[CreateFolderRequest]] = Field(
        None, title='Child Folders'
    )


class CreateIssueResponseSchema(BlockFolderRequest):
    pass


class CreateRoleGroupRequest(BaseConfigModel):
    name: constr(min_length=1, max_length=50) = Field(..., title='Name')
    permissions: List[UUID] = Field(..., title='Permissions')


class ElementSchema(BaseConfigModel):
    name: str = Field(..., title='Name')
    global_id: str = Field(..., title='Global Id')


class EntityToApproveRequest(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    version_oid: UUID = Field(..., title='Version Oid')


class EntityType(Enum):
    pdf = 'pdf'
    model = 'model'
    docx = 'docx'
    xlsx = 'xlsx'
    other = 'other'


class EntityVersionResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    version_number: str = Field(..., title='Version Number')
    created_at: Optional[datetime] = Field(None, title='Created At')
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None
    comment: Optional[str] = Field(None, title='Comment')
    size: Optional[int] = Field(None, title='Size')


class EntityVersionResponseSchemaBase(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    version_number: str = Field(..., title='Version Number')


class ErrorCodeType(Enum):
    IFC = 'IFC'
    EXTENSION_COUNT = 'EXTENSION_COUNT'
    IFC_JSON = 'IFC_JSON'
    NAME = 'NAME'
    EXTENSION = 'EXTENSION'


class FileBaseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    filename: str = Field(..., title='Filename')
    unique_filename: str = Field(..., title='Unique Filename')
    mime_type: Optional[str] = Field(None, title='Mime Type')
    url: Optional[str] = Field(None, title='Url')


class FileRequestSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    filename: constr(max_length=300) = Field(..., title='Filename')
    unique_filename: constr(max_length=350) = Field(..., title='Unique Filename')
    mime_type: Optional[constr(max_length=100)] = Field(None, title='Mime Type')


class FileResponseSchema(FileBaseSchema):
    pass


class Filters(BaseConfigModel):
    name: Optional[str] = Field(None, title='Name')
    author: Optional[str] = Field(None, title='Author')


class FolderResponseBase(ApprovalProcessTemplateResponseSchemaBase):
    pass


class GenerateFileUploadLinkRequestSchema(BaseConfigModel):
    filename: str = Field(..., title='Filename')


class GetRoleGroupFilterRequest(BaseConfigModel):
    role_group__in: Optional[List[UUID]] = Field(None, title='Role Group  In')
    permission__in: Optional[List[UUID]] = Field(None, title='Permission  In')
    folder_oids: Optional[List[UUID]] = Field(None, title='Folder Oids')
    entity_oids: Optional[List[UUID]] = Field(None, title='Entity Oids')
    is_editable: Optional[bool] = Field(None, title='Is Editable')
    search: Optional[str] = Field(None, title='Search')
    sort: Optional[List[str]] = Field(None, title='Sort')


class IssueFileRequestSchema(FileRequestSchema):
    pass


class IssueFilterSchema(BaseConfigModel):
    statuses: Optional[List[str]] = Field(None, title='Statuses')
    sort: Optional[List[str]] = Field(None, title='Sort')


class IssueForAdminFilterSchema(BaseConfigModel):
    oid: Optional[UUID] = Field(None, title='Oid')
    oids: Optional[List[UUID]] = Field(None, title='Oids')
    project_oids: Optional[List[UUID]] = Field(None, title='Project Oids')
    entity_oids: Optional[List[UUID]] = Field(None, title='Entity Oids')
    creator_oids: Optional[List[UUID]] = Field(None, title='Creator Oids')
    assignee_oids: Optional[List[UUID]] = Field(None, title='Assignee Oids')
    statuses: Optional[List[str]] = Field(None, title='Statuses')
    entity_types: Optional[List[EntityType]] = Field(None, title='Entity Types')
    sort: Optional[List[str]] = Field(None, title='Sort')
    page: Optional[PositiveInt] = Field(1, title='Page')
    page_size: Optional[PositiveInt] = Field(10, title='Page Size')


class IssueStatusBaseSchema(BaseConfigModel):
    oid: str = Field(..., title='Oid')
    name: str = Field(..., title='Name')


class IssueStatusType(Enum):
    OPENED = 'OPENED'
    CHECK = 'CHECK'
    FIXED = 'FIXED'
    EXPIRED = 'EXPIRED'


class MoveEntityRequest(BaseConfigModel):
    folder_oid: UUID = Field(..., title='Folder Oid')


class MoveFolderRequest(BaseConfigModel):
    parent_folder_oid: UUID = Field(..., title='Parent Folder Oid')


class NormalSchema(CameraPositionSchema):
    pass


class PaginatedResponseBase(BaseConfigModel):
    results: List = Field(..., title='Results')
    next: Optional[AnyUrl] = Field(None, title='Next')
    previous: Optional[AnyUrl] = Field(None, title='Previous')
    count: int = Field(..., title='Count')


class PatchEntityRequestSchema(BaseConfigModel):
    name: Optional[str] = Field(None, title='Name')
    preview: Optional[FileRequestSchema] = None
    additional_info: Optional[Dict[str, Any]] = Field(None, title='Additional Info')


class PatchFolderRequest(BaseConfigModel):
    oid: Optional[UUID] = Field(None, title='Oid')
    name: Optional[str] = Field(None, title='Name')
    parent_folder_oid: Optional[UUID] = Field(None, title='Parent Folder Oid')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    child_folders: Optional[List[CreateFolderRequest]] = Field(
        None, title='Child Folders'
    )


class PointSchema(CameraPositionSchema):
    pass


class PositionClipperPlaneSchema(BaseConfigModel):
    normal: NormalSchema
    point: PointSchema


class PositionSchema(BaseConfigModel):
    page: Optional[int] = Field(None, title='Page')
    x: float = Field(..., title='X')
    y: float = Field(..., title='Y')
    z: float = Field(..., title='Z')


class RoleGroupFilterType(Enum):
    company_name = 'company_name'
    user_position = 'user_position'
    role_group = 'role_group'


class RoleGroupShortResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    is_editable: bool = Field(..., title='Is Editable')


class RolePermissionResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    code_name: str = Field(..., title='Code Name')


class SearchApprovalProcessesLogsRequest(BaseConfigModel):
    page: Optional[int] = Field(1, title='Page')
    per_page: Optional[int] = Field(10, title='Per Page')
    filters: Optional[ApprovalProcessesLogsFilter] = None


class SearchApprovalProcessesRequest(BaseConfigModel):
    page: Optional[int] = Field(1, title='Page')
    per_page: Optional[int] = Field(10, title='Per Page')
    scope: ApprovalProcessesScope
    filters: Optional[ApprovalProcessesFilter] = None


class SearchByType(Enum):
    first_name = 'first_name'
    last_name = 'last_name'
    middle_name = 'middle_name'
    company_name = 'company_name'
    position_name = 'position_name'
    full_name = 'full_name'


class SetUsersForRoleGroupRequest(BaseConfigModel):
    users: List[UUID] = Field(..., title='Users')


class UpdateRoleGroupRequest(CreateRoleGroupRequest):
    pass


class UpdateUserAccessSettingSchema(BaseConfigModel):
    user_oid: UUID = Field(..., title='User Oid')
    permissions: List[UUID] = Field(..., title='Permissions')


class UserApproveResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: Optional[str] = Field(None, title='First Name')
    last_name: Optional[str] = Field(None, title='Last Name')
    middle_name: Optional[str] = Field(None, title='Middle Name')
    photo: Optional[str] = Field(None, title='Photo')
    position: Optional[str] = Field(None, title='Position')
    full_name: Optional[str] = Field(None, title='Full Name')
    updated_at: datetime = Field(..., title='Updated At')
    status: Optional[ApprovalProcessStatus] = 'pending'
    comment: Optional[str] = Field(None, title='Comment')


class UserResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: Optional[str] = Field(None, title='First Name')
    last_name: Optional[str] = Field(None, title='Last Name')
    middle_name: Optional[str] = Field(None, title='Middle Name')
    photo: Optional[str] = Field(None, title='Photo')
    position: Optional[str] = Field(None, title='Position')
    full_name: Optional[str] = Field(None, title='Full Name')


class UserShortSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: Optional[str] = Field(None, title='First Name')
    last_name: Optional[str] = Field(None, title='Last Name')
    middle_name: Optional[str] = Field(None, title='Middle Name')
    photo: Optional[str] = Field(None, title='Photo')
    position: Optional[str] = Field(None, title='Position')


class UserWithPermissionAndRoleGroupResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: str = Field(..., title='First Name')
    last_name: str = Field(..., title='Last Name')
    middle_name: Optional[str] = Field(..., title='Middle Name')
    company_name: Optional[str] = Field(..., title='Company Name')
    position: str = Field(..., title='Position')
    photo: Optional[str] = Field(..., title='Photo')
    permissions: List[UUID] = Field(..., title='Permissions')
    role_group: Optional[RoleGroupShortResponse]


class UserWithPermissionResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: str = Field(..., title='First Name')
    last_name: str = Field(..., title='Last Name')
    middle_name: Optional[str] = Field(..., title='Middle Name')
    company_name: Optional[str] = Field(..., title='Company Name')
    position: str = Field(..., title='Position')
    photo: Optional[str] = Field(..., title='Photo')
    permissions: List[UUID] = Field(..., title='Permissions')


class UserWithRoleGroupResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    first_name: str = Field(..., title='First Name')
    last_name: str = Field(..., title='Last Name')
    middle_name: Optional[str] = Field(..., title='Middle Name')
    company_name: Optional[str] = Field(..., title='Company Name')
    position: str = Field(..., title='Position')
    photo: Optional[str] = Field(..., title='Photo')
    role_group: Optional[RoleGroupShortResponse]


class UsersFilterRequest(BaseConfigModel):
    search: Optional[str] = Field(None, title='Search')
    search_by: Optional[List[SearchByType]] = Field(None, title='Search By')
    company_name__in: Optional[List[str]] = Field(None, title='Company Name  In')
    position_name__in: Optional[List[str]] = Field(None, title='Position Name  In')
    role_group_name__in: Optional[List[str]] = Field(None, title='Role Group Name  In')
    role_group_oid__in: Optional[List[UUID]] = Field(None, title='Role Group Oid  In')
    entity_oids: Optional[List[UUID]] = Field(None, title='Entity Oids')
    folder_oids: Optional[List[UUID]] = Field(None, title='Folder Oids')
    permissions_code_names: Optional[List[str]] = Field(
        None, title='Permissions Code Names'
    )


class ValidationError(BaseConfigModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class AccessSettingResponse(BaseConfigModel):
    users: List[UserWithPermissionAndRoleGroupResponse] = Field(..., title='Users')
    role_groups: List[RoleGroupShortResponse] = Field(..., title='Role Groups')


class ActionRequest(BaseConfigModel):
    action: ApproveAction
    comment: Optional[str] = Field(None, title='Comment')


class AdditionalInfoSchema(BaseConfigModel):
    element: Optional[ElementSchema] = None
    camera_position: CameraPositionSchema
    camera_rotation: Optional[CameraRotationSchema] = None
    position_clipper_planes: Optional[List[PositionClipperPlaneSchema]] = Field(
        None, title='Position Clipper Planes'
    )


class ApprovalProcessLogResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    updated_at: datetime = Field(..., title='Updated At')
    approval_process: ApprovalProcessResponseSchema
    actor: UserResponseSchema
    action: ApproveAction
    comment: Optional[str] = Field(None, title='Comment')
    step: ApprovalStepLogResponse


class ApprovalProcessResponseShortSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    status: Optional[str] = Field('in_progress', title='Status')
    type: ApprovalProcessType
    version: Optional[EntityVersionResponseSchemaBase] = None
    creator: UserResponseSchema
    current_step: Optional[ApprovalStepShortResponse] = None
    number_of_steps: int = Field(..., title='Number Of Steps')


class ApprovalProcessTemplateFilterReqeust(BaseConfigModel):
    name: Optional[str] = Field(None, title='Name')
    author: Optional[str] = Field(None, title='Author')
    filters: Optional[Filters] = None
    page: Optional[int] = Field(1, title='Page')
    per_page: Optional[int] = Field(10, title='Per Page')


class ApprovalProcessTemplateResponseShortSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    steps_count: int = Field(..., title='Steps Count')
    creator: UserResponseSchema
    description: Optional[str] = Field(..., title='Description')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class ApprovalProcessTemplateStepResponseSchema(BaseConfigModel):
    name: str = Field(..., title='Name')
    serial_number: int = Field(..., title='Serial Number')
    minimal_approves_number: Optional[int] = Field(
        None, title='Minimal Approves Number'
    )
    approving_users: Optional[List[Union[UUID, UserResponseSchema]]] = Field(
        None, title='Approving Users'
    )
    approving_groups: Optional[List[UUID]] = Field(None, title='Approving Groups')


class ApprovalStepFullResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    deadline: Optional[date] = Field(None, title='Deadline')
    minimal_approves_number: Optional[int] = Field(
        None, title='Minimal Approves Number'
    )
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    approving_users: List[UserApproveResponseSchema] = Field(
        ..., title='Approving Users'
    )
    completed_at: Optional[datetime] = Field(None, title='Completed At')
    updated_at: Optional[datetime] = Field(None, title='Updated At')


class BlockEntityResponseSchema(BaseConfigModel):
    user: UserResponseSchema
    unlock_time: Union[int, float] = Field(..., title='Unlock Time')


class BodyRemoveFilesFromStorageProjectsProjectOidEntitiesFilesRemoveFromStoragePost(
    BaseConfigModel
):
    files: List[FileRequestSchema] = Field(..., title='Files')


class ChangeStatusIssueRequestSchema(BaseConfigModel):
    new_status: IssueStatusType
    fixed_version: Optional[str] = Field(None, title='Fixed Version')


class CheckContentRequestSchema(BaseConfigModel):
    name: str = Field(..., title='Name')
    type: EntityType
    version_number: str = Field(..., title='Version Number')
    files: List[CheckFileSchema] = Field(..., title='Files')


class CheckObjectsForApprovalProcessRequest(BaseConfigModel):
    entities: Optional[List[EntityToApproveRequest]] = Field(None, title='Entities')
    folder_oids: Optional[List[UUID]] = Field(None, title='Folder Oids')


class CreateApprovalProcessRequest(BaseConfigModel):
    name: str = Field(..., title='Name')
    description: Optional[str] = Field(None, title='Description')
    entities: Optional[List[EntityToApproveRequest]] = Field(None, title='Entities')
    folder_oids: Optional[List[UUID]] = Field(None, title='Folder Oids')
    steps: Optional[List[ApprovalStepRequest]] = Field(None, title='Steps')
    move_to_folder_oid: Optional[UUID] = Field(None, title='Move To Folder Oid')
    template_oid: Optional[UUID] = Field(None, title='Template Oid')


class CreateApprovalProcessResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    status: Optional[str] = Field('in_progress', title='Status')
    description: Optional[str] = Field(None, title='Description')
    updated_at: datetime = Field(..., title='Updated At')
    entities: List[EntityToApproveRequest] = Field(..., title='Entities')
    folder_oids: Optional[List[UUID]] = Field(None, title='Folder Oids')
    steps: Optional[List[CreateApprovalStepResponse]] = Field(None, title='Steps')
    move_to_folder_oid: Optional[UUID] = Field(None, title='Move To Folder Oid')
    template_oid: Optional[UUID] = Field(None, title='Template Oid')


class CreateApprovalProcessTemplateResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    description: Optional[str] = Field(None, title='Description')
    updated_at: datetime = Field(..., title='Updated At')
    created_at: datetime = Field(..., title='Created At')
    steps: List[ApprovalProcessTemplateStepResponseSchema] = Field(..., title='Steps')
    move_to_folder_oid: Optional[UUID] = Field(None, title='Move To Folder Oid')


class CreateEntityRequestSchema(BaseConfigModel):
    name: str = Field(..., title='Name')
    type: EntityType
    folder_oid: UUID = Field(..., title='Folder Oid')
    preview: Optional[FileRequestSchema] = None
    files: List[FileRequestSchema] = Field(..., title='Files')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')


class CreateEntityVersionResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    name: str = Field(..., title='Name')
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: UUID = Field(..., title='Project Oid')
    folder_oid: UUID = Field(..., title='Folder Oid')
    parent_folder_oids: List[UUID] = Field(..., title='Parent Folder Oids')


class CreateIssueRequestSchema(BaseConfigModel):
    assignee_oid: UUID = Field(..., title='Assignee Oid')
    title: constr(max_length=150) = Field(..., title='Title')
    message: Optional[constr(max_length=500)] = Field(None, title='Message')
    deadline: date = Field(..., title='Deadline')
    position: PositionSchema
    additional_info: Optional[AdditionalInfoSchema] = None
    files: List[IssueFileRequestSchema] = Field(..., title='Files')


class EntitiesFilters(BaseConfigModel):
    is_deleted: Optional[bool] = Field(None, title='Is Deleted')
    oid__in: Optional[List[UUID]] = Field(None, title='Oid  In')
    creator_oid__in: Optional[List[UUID]] = Field(None, title='Creator Oid  In')
    type__in: Optional[List[EntityType]] = Field(None, title='Type  In')
    folder_oid__in: Optional[List[UUID]] = Field(None, title='Folder Oid  In')
    version__in: Optional[List[int]] = Field(None, title='Version  In')
    status__in: Optional[List[str]] = Field(None, title='Status  In')


class EntityFullResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    name: str = Field(..., title='Name')
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: UUID = Field(..., title='Project Oid')
    folder_oid: UUID = Field(..., title='Folder Oid')
    parent_folder_oids: List[UUID] = Field(..., title='Parent Folder Oids')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    preview: Optional[FileResponseSchema] = None
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    parent_folders: List = Field(..., title='Parent Folders')


class EntityResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    name: str = Field(..., title='Name')
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: UUID = Field(..., title='Project Oid')
    folder_oid: UUID = Field(..., title='Folder Oid')
    parent_folder_oids: List[UUID] = Field(..., title='Parent Folder Oids')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    preview: Optional[FileResponseSchema] = None
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')


class EntityShortSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    type: EntityType
    name: str = Field(..., title='Name')


class EntityVersionFullResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    version_number: Optional[str] = Field('1.0', title='Version Number')
    created_at: datetime = Field(..., title='Created At')
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    comment: Optional[str] = Field(None, title='Comment')
    size: Optional[int] = Field(None, title='Size')
    entity_name: Optional[str] = Field(None, title='Entity Name')
    type: Optional[EntityType] = None
    files: List[FileResponseSchema] = Field(..., title='Files')
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None
    creator: Optional[UserShortSchema] = None


class EntityVersionListResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    version_number: str = Field(..., title='Version Number')
    created_at: datetime = Field(..., title='Created At')
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    comment: Optional[str] = Field(None, title='Comment')
    size: Optional[int] = Field(None, title='Size')
    user: Optional[UserShortSchema] = None
    entity_name: Optional[str] = Field(None, title='Entity Name')
    type: Optional[EntityType] = None
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None


class EntityVersionRequestSchema(BaseConfigModel):
    files: List[FileRequestSchema] = Field(..., title='Files')
    is_changes: Optional[bool] = Field(False, title='Is Changes')
    comment: Optional[constr(max_length=1000)] = Field(None, title='Comment')


class ErrorCodeSchema(BaseConfigModel):
    code: ErrorCodeType


class FolderPathResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    path: Optional[List[FolderResponseBase]] = Field(None, title='Path')


class FolderResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    creator: UserResponseSchema
    project_oid: UUID = Field(..., title='Project Oid')
    parent_folder_oid: Optional[UUID] = Field(None, title='Parent Folder Oid')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')


class GetUsersFilterRequest(BaseConfigModel):
    filters: Optional[UsersFilterRequest] = None
    have_role_group: Optional[bool] = Field(None, title='Have Role Group')
    without_me: Optional[bool] = Field(None, title='Without Me')
    sort: Optional[List[str]] = Field(None, title='Sort')


class HTTPValidationError(BaseConfigModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class IssueResponseSchema(BaseConfigModel):
    oid: Optional[UUID] = Field(None, title='Oid')
    project_oid: UUID = Field(..., title='Project Oid')
    title: str = Field(..., title='Title')
    message: Optional[str] = Field(None, title='Message')
    deadline: date = Field(..., title='Deadline')
    created_at: Optional[datetime] = Field(None, title='Created At')
    fixed_version: Optional[str] = Field(None, title='Fixed Version')
    position: PositionSchema
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    created_version: Optional[str] = Field(None, title='Created Version')
    entity: Optional[EntityShortSchema] = None
    creator: UserShortSchema
    assignee: UserShortSchema
    status: IssueStatusBaseSchema
    files: Optional[List[FileBaseSchema]] = Field([], title='Files')
    new_statuses: Optional[List[IssueStatusBaseSchema]] = Field(
        [], title='New Statuses'
    )


class IssueSchema(BaseConfigModel):
    oid: Optional[UUID] = Field(None, title='Oid')
    project_oid: UUID = Field(..., title='Project Oid')
    title: str = Field(..., title='Title')
    message: Optional[str] = Field(None, title='Message')
    deadline: date = Field(..., title='Deadline')
    created_at: Optional[datetime] = Field(None, title='Created At')
    fixed_version: Optional[str] = Field(None, title='Fixed Version')
    position: PositionSchema
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    created_version: Optional[str] = Field(None, title='Created Version')
    entity: Optional[EntityShortSchema] = None
    creator: UserShortSchema
    assignee: UserShortSchema
    status: IssueStatusBaseSchema
    files: Optional[List[FileBaseSchema]] = Field([], title='Files')


class ListIssueResponseSchema(BaseConfigModel):
    objects: List[IssueSchema] = Field(..., title='Objects')


class PagePaginatorResponseApprovalProcessLogResponseSchema(BaseConfigModel):
    objects: List[ApprovalProcessLogResponseSchema] = Field(..., title='Objects')
    current_page: int = Field(..., title='Current Page')
    total_pages: int = Field(..., title='Total Pages')
    page_size: int = Field(..., title='Page Size')
    total_items: int = Field(..., title='Total Items')


class PagePaginatorResponseApprovalProcessResponseShortSchema(BaseConfigModel):
    objects: List[ApprovalProcessResponseShortSchema] = Field(..., title='Objects')
    current_page: int = Field(..., title='Current Page')
    total_pages: int = Field(..., title='Total Pages')
    page_size: int = Field(..., title='Page Size')
    total_items: int = Field(..., title='Total Items')


class PaginatedApprovalProcessTemplateResponse(BaseConfigModel):
    objects: List[ApprovalProcessTemplateResponseShortSchema] = Field(
        ..., title='Objects'
    )
    current_page: int = Field(..., title='Current Page')
    total_pages: int = Field(..., title='Total Pages')
    page_size: int = Field(..., title='Page Size')
    total_items: int = Field(..., title='Total Items')


class PaginatedResponseRolePermissionResponse(BaseConfigModel):
    results: List[RolePermissionResponse] = Field(..., title='Results')
    next: Optional[AnyUrl] = Field(None, title='Next')
    previous: Optional[AnyUrl] = Field(None, title='Previous')
    count: int = Field(..., title='Count')


class PaginatedResponseUserWithPermissionResponse(BaseConfigModel):
    results: List[UserWithPermissionResponse] = Field(..., title='Results')
    next: Optional[AnyUrl] = Field(None, title='Next')
    previous: Optional[AnyUrl] = Field(None, title='Previous')
    count: int = Field(..., title='Count')


class PaginatedResponseUserWithRoleGroupResponse(BaseConfigModel):
    results: List[UserWithRoleGroupResponse] = Field(..., title='Results')
    next: Optional[AnyUrl] = Field(None, title='Next')
    previous: Optional[AnyUrl] = Field(None, title='Previous')
    count: int = Field(..., title='Count')


class RoleGroupResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    permissions: List[Optional[RolePermissionResponse]] = Field(
        ..., title='Permissions'
    )
    is_editable: bool = Field(..., title='Is Editable')


class UpdateRoleGroupAccessSettingSchema(BaseConfigModel):
    role_group_oid: UUID = Field(..., title='Role Group Oid')
    users_with_custom_permissions: Optional[List[UpdateUserAccessSettingSchema]] = (
        Field(None, title='Users With Custom Permissions')
    )


class ApprovalProcessTemplateFullResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    description: Optional[str] = Field(None, title='Description')
    steps: List[ApprovalProcessTemplateStepResponseSchema] = Field(..., title='Steps')
    move_to_folder: Optional[FolderPathResponse] = None
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')


class ContentErrorSchema(BaseConfigModel):
    major: bool = Field(..., title='Major')
    business_error: List[ErrorCodeSchema] = Field(..., title='Business Error')


class ContentFolderResponse(BaseConfigModel):
    folders: List[FolderResponse] = Field(..., title='Folders')
    entities: List[EntityResponseSchema] = Field(..., title='Entities')


class IssuePaginationResponseSchema(BaseConfigModel):
    objects: List[IssueSchema] = Field(..., title='Objects')
    current_page: Optional[int] = Field(None, title='Current Page')
    page_size: Optional[int] = Field(None, title='Page Size')
    total_items: Optional[int] = Field(None, title='Total Items')
    total_pages: int = Field(..., title='Total Pages')


class PaginatedResponseRoleGroupResponse(BaseConfigModel):
    results: List[RoleGroupResponse] = Field(..., title='Results')
    next: Optional[AnyUrl] = Field(None, title='Next')
    previous: Optional[AnyUrl] = Field(None, title='Previous')
    count: int = Field(..., title='Count')


class RetrieveFolderResponse(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    updated_at: datetime = Field(..., title='Updated At')
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    creator: UserResponseSchema
    project_oid: UUID = Field(..., title='Project Oid')
    parent_folder_oid: Optional[UUID] = Field(None, title='Parent Folder Oid')
    additional_info: Optional[Dict[str, Any]] = Field({}, title='Additional Info')
    content: ContentFolderResponse


class UpdateAccessSettingRequestSchema(BaseConfigModel):
    update_role_groups: Optional[List[UpdateRoleGroupAccessSettingSchema]] = Field(
        None, description='Ролевые группы на выдачу доступа', title='Update Role Groups'
    )
    update_users: Optional[List[UpdateUserAccessSettingSchema]] = Field(
        None, description='Пользователи(UUID) на выдачу доступа', title='Update Users'
    )
    remove_role_groups: Optional[List[UUID]] = Field(
        None,
        description='Ролевые группы (UUID) на удаление доступа',
        title='Remove Role Groups',
    )
    remove_users: Optional[List[UUID]] = Field(
        None,
        description='Пользователи (UUID) на удаление доступа',
        title='Remove Users',
    )


class ApprovalProcessFullResponseSchema(BaseConfigModel):
    oid: UUID = Field(..., title='Oid')
    name: str = Field(..., title='Name')
    created_at: datetime = Field(..., title='Created At')
    status: Optional[str] = Field('in_progress', title='Status')
    description: Optional[str] = Field(None, title='Description')
    updated_at: datetime = Field(..., title='Updated At')
    creator: UserResponseSchema
    template: Optional[ApprovalProcessTemplateResponseSchemaBase] = None
    move_to_folder: Optional[FolderPathResponse] = None
    approval_objects: ContentFolderResponse
    steps: List[ApprovalStepResponseSchemaBase] = Field(..., title='Steps')
    current_step: Optional[ApprovalStepFullResponseSchema] = None
    deleted_at: Optional[datetime] = Field(None, title='Deleted At')
    remover: Optional[UserResponseSchema] = None


class ContentCheckResponseSchema(BaseConfigModel):
    type: EntityType
    validation: ContentValidationType
    error: Optional[ContentErrorSchema] = None


CreateFolderRequest.update_forward_refs()
