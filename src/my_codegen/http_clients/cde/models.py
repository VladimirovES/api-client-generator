# generated by datamodel-codegen:
#   filename:  swagger.json
#   timestamp: 2025-01-11T16:33:08+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from my_codegen.pydantic_utils.pydantic_config import BaseConfigModel
from pydantic import AnyUrl, Field, RootModel
from typing_extensions import Annotated


class ApprovalProcessResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    status: Annotated[Optional[str], Field(title='Status')] = 'in_progress'


class ApprovalProcessResponseSchemaBase(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    status: Annotated[Optional[str], Field(title='Status')] = 'in_progress'


class ApprovalProcessStatus(Enum):
    in_progress = 'in_progress'
    approved = 'approved'
    rejected = 'rejected'
    expired = 'expired'
    pending = 'pending'


class ApprovalProcessTemplateResponseSchemaBase(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]


class ApprovalProcessType(Enum):
    model = 'model'
    single_file = 'single_file'
    folder = 'folder'
    multiple = 'multiple'


class ApprovalProcessesFilter(BaseConfigModel):
    approval_process_oids: Annotated[
        Optional[List[UUID]], Field(title='Approval Process Oids')
    ] = None


class ApprovalProcessesLogsFilter(BaseConfigModel):
    approval_process_oids: Annotated[
        Optional[List[UUID]], Field(title='Approval Process Oids')
    ] = None


class ApprovalProcessesScope(Enum):
    incoming = 'incoming'
    outgoing = 'outgoing'
    all = 'all'


class ApprovalStepLogResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    serial_number: Annotated[int, Field(title='Serial Number')]
    deadline: Annotated[Optional[date], Field(title='Deadline')] = None
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    number_of_steps: Annotated[int, Field(title='Number Of Steps')]


class ApprovalStepRequest(BaseConfigModel):
    deadline: Annotated[Optional[date], Field(title='Deadline')] = None
    name: Annotated[str, Field(title='Name')]
    minimal_approves_number: Annotated[
        Optional[int], Field(title='Minimal Approves Number')
    ] = None
    approving_users: Annotated[Optional[List[UUID]], Field(title='Approving Users')] = (
        None
    )


class ApprovalStepResponseSchemaBase(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]


class ApprovalStepShortResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    serial_number: Annotated[int, Field(title='Serial Number')]


class ApprovalTemplateStepRequest(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    minimal_approves_number: Annotated[
        Optional[int], Field(title='Minimal Approves Number')
    ] = None
    approving_users: Annotated[Optional[List[UUID]], Field(title='Approving Users')] = (
        None
    )
    approving_groups: Annotated[
        Optional[List[UUID]], Field(title='Approving Groups')
    ] = None


class ApproveAction(Enum):
    approve = 'approve'
    reject = 'reject'
    expire = 'expire'
    cancel = 'cancel'


class BlockFolderRequest(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]


class CameraPositionSchema(BaseConfigModel):
    x: Annotated[float, Field(title='X')]
    y: Annotated[float, Field(title='Y')]
    z: Annotated[float, Field(title='Z')]


class CameraRotationSchema(BaseConfigModel):
    x: Annotated[float, Field(title='X')]
    y: Annotated[float, Field(title='Y')]
    z: Annotated[float, Field(title='Z')]


class CheckBlockFolderResponse(BaseConfigModel):
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]
    is_block: Annotated[bool, Field(title='Is Block')]


class CheckFileSchema(BaseConfigModel):
    filename: Annotated[str, Field(title='Filename')]
    name: Annotated[str, Field(title='Name')]
    extension: Annotated[str, Field(title='Extension')]


class CheckRoleGroupNameNotExistRequest(BaseConfigModel):
    name: Annotated[str, Field(max_length=50, min_length=1, title='Name')]


class ContentValidationType(Enum):
    error = 'error'
    ok = 'ok'


class Description(RootModel[str]):
    root: Annotated[str, Field(max_length=1000, min_length=1, title='Description')]


class CreateApprovalProcessTemplateRequest(BaseConfigModel):
    name: Annotated[str, Field(max_length=50, min_length=1, title='Name')]
    description: Annotated[Optional[Description], Field(title='Description')] = None
    steps: Annotated[List[ApprovalTemplateStepRequest], Field(title='Steps')]
    move_to_folder_oid: Annotated[Optional[UUID], Field(title='Move To Folder Oid')] = (
        None
    )


class CreateApprovalStepResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    deadline: Annotated[Optional[date], Field(title='Deadline')] = None
    minimal_approves_number: Annotated[
        Optional[int], Field(title='Minimal Approves Number')
    ] = None
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    approving_users: Annotated[Optional[List[UUID]], Field(title='Approving Users')] = (
        None
    )


class CreateFolderRequest(BaseConfigModel):
    oid: Annotated[Optional[UUID], Field(title='Oid')] = None
    name: Annotated[str, Field(title='Name')]
    parent_folder_oid: Annotated[Optional[UUID], Field(title='Parent Folder Oid')] = (
        None
    )
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    child_folders: Annotated[
        Optional[List[CreateFolderRequest]], Field(title='Child Folders')
    ] = None


class Message(RootModel[str]):
    root: Annotated[str, Field(max_length=500, title='Message')]


class CreateIssueResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]


class CreateRoleGroupRequest(BaseConfigModel):
    name: Annotated[str, Field(max_length=50, min_length=1, title='Name')]
    permissions: Annotated[List[UUID], Field(title='Permissions')]


class ElementSchema(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    global_id: Annotated[str, Field(title='Global Id')]


class EntityToApproveRequest(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    version_oid: Annotated[UUID, Field(title='Version Oid')]


class EntityType(Enum):
    pdf = 'pdf'
    model = 'model'
    docx = 'docx'
    xlsx = 'xlsx'
    other = 'other'


class Comment(RootModel[str]):
    root: Annotated[str, Field(max_length=1000, title='Comment')]


class EntityVersionResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    version_number: Annotated[str, Field(title='Version Number')]
    created_at: Annotated[Optional[datetime], Field(title='Created At')] = None
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None
    comment: Annotated[Optional[str], Field(title='Comment')] = None
    size: Annotated[Optional[int], Field(title='Size')] = None


class EntityVersionResponseSchemaBase(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    version_number: Annotated[str, Field(title='Version Number')]


class ErrorCodeType(Enum):
    IFC = 'IFC'
    EXTENSION_COUNT = 'EXTENSION_COUNT'
    IFC_JSON = 'IFC_JSON'
    NAME = 'NAME'
    EXTENSION = 'EXTENSION'


class FileBaseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    filename: Annotated[str, Field(title='Filename')]
    unique_filename: Annotated[str, Field(title='Unique Filename')]
    mime_type: Annotated[Optional[str], Field(title='Mime Type')] = None
    url: Annotated[Optional[str], Field(title='Url')] = None


class MimeType(RootModel[str]):
    root: Annotated[str, Field(max_length=100, title='Mime Type')]


class FileRequestSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    filename: Annotated[str, Field(max_length=300, title='Filename')]
    unique_filename: Annotated[str, Field(max_length=350, title='Unique Filename')]
    mime_type: Annotated[Optional[MimeType], Field(title='Mime Type')] = None


class FileResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    filename: Annotated[str, Field(title='Filename')]
    unique_filename: Annotated[str, Field(title='Unique Filename')]
    mime_type: Annotated[Optional[str], Field(title='Mime Type')] = None
    url: Annotated[Optional[str], Field(title='Url')] = None


class Filters(BaseConfigModel):
    name: Annotated[Optional[str], Field(title='Name')] = None
    author: Annotated[Optional[str], Field(title='Author')] = None


class FolderResponseBase(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]


class GenerateFileUploadLinkRequestSchema(BaseConfigModel):
    filename: Annotated[str, Field(title='Filename')]


class GetRoleGroupFilterRequest(BaseConfigModel):
    role_group__in: Annotated[Optional[List[UUID]], Field(title='Role Group  In')] = (
        None
    )
    permission__in: Annotated[Optional[List[UUID]], Field(title='Permission  In')] = (
        None
    )
    folder_oids: Annotated[Optional[List[UUID]], Field(title='Folder Oids')] = None
    entity_oids: Annotated[Optional[List[UUID]], Field(title='Entity Oids')] = None
    is_editable: Annotated[Optional[bool], Field(title='Is Editable')] = None
    search: Annotated[Optional[str], Field(title='Search')] = None
    sort: Annotated[Optional[List[str]], Field(title='Sort')] = None


class IssueFileRequestSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    filename: Annotated[str, Field(max_length=300, title='Filename')]
    unique_filename: Annotated[str, Field(max_length=350, title='Unique Filename')]
    mime_type: Annotated[Optional[MimeType], Field(title='Mime Type')] = None


class IssueFilterSchema(BaseConfigModel):
    statuses: Annotated[Optional[List[str]], Field(title='Statuses')] = None
    sort: Annotated[Optional[List[str]], Field(title='Sort')] = None


class Page(RootModel[int]):
    root: Annotated[int, Field(gt=0, title='Page')]


class PageSize(RootModel[int]):
    root: Annotated[int, Field(gt=0, title='Page Size')]


class IssueForAdminFilterSchema(BaseConfigModel):
    oid: Annotated[Optional[UUID], Field(title='Oid')] = None
    oids: Annotated[Optional[List[UUID]], Field(title='Oids')] = None
    project_oids: Annotated[Optional[List[UUID]], Field(title='Project Oids')] = None
    entity_oids: Annotated[Optional[List[UUID]], Field(title='Entity Oids')] = None
    creator_oids: Annotated[Optional[List[UUID]], Field(title='Creator Oids')] = None
    assignee_oids: Annotated[Optional[List[UUID]], Field(title='Assignee Oids')] = None
    statuses: Annotated[Optional[List[str]], Field(title='Statuses')] = None
    entity_types: Annotated[Optional[List[EntityType]], Field(title='Entity Types')] = (
        None
    )
    sort: Annotated[Optional[List[str]], Field(title='Sort')] = None
    page: Annotated[Optional[Page], Field(title='Page')] = 1
    page_size: Annotated[Optional[PageSize], Field(title='Page Size')] = 10


class IssueStatusBaseSchema(BaseConfigModel):
    oid: Annotated[str, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]


class IssueStatusType(Enum):
    OPENED = 'OPENED'
    CHECK = 'CHECK'
    FIXED = 'FIXED'
    EXPIRED = 'EXPIRED'


class MoveEntityRequest(BaseConfigModel):
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]


class MoveFolderRequest(BaseConfigModel):
    parent_folder_oid: Annotated[UUID, Field(title='Parent Folder Oid')]


class NormalSchema(BaseConfigModel):
    x: Annotated[float, Field(title='X')]
    y: Annotated[float, Field(title='Y')]
    z: Annotated[float, Field(title='Z')]


class Next(RootModel[AnyUrl]):
    root: Annotated[AnyUrl, Field(title='Next')]


class Previous(RootModel[AnyUrl]):
    root: Annotated[AnyUrl, Field(title='Previous')]


class PaginatedResponseBase(BaseConfigModel):
    results: Annotated[List, Field(title='Results')]
    next: Annotated[Optional[Next], Field(title='Next')] = None
    previous: Annotated[Optional[Previous], Field(title='Previous')] = None
    count: Annotated[int, Field(title='Count')]


class PatchEntityRequestSchema(BaseConfigModel):
    name: Annotated[Optional[str], Field(title='Name')] = None
    preview: Optional[FileRequestSchema] = None
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = None


class PatchFolderRequest(BaseConfigModel):
    oid: Annotated[Optional[UUID], Field(title='Oid')] = None
    name: Annotated[Optional[str], Field(title='Name')] = None
    parent_folder_oid: Annotated[Optional[UUID], Field(title='Parent Folder Oid')] = (
        None
    )
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    child_folders: Annotated[
        Optional[List[CreateFolderRequest]], Field(title='Child Folders')
    ] = None


class PointSchema(BaseConfigModel):
    x: Annotated[float, Field(title='X')]
    y: Annotated[float, Field(title='Y')]
    z: Annotated[float, Field(title='Z')]


class PositionClipperPlaneSchema(BaseConfigModel):
    normal: NormalSchema
    point: PointSchema


class PositionSchema(BaseConfigModel):
    page: Annotated[Optional[int], Field(title='Page')] = None
    x: Annotated[float, Field(title='X')]
    y: Annotated[float, Field(title='Y')]
    z: Annotated[float, Field(title='Z')]


class RoleGroupFilterType(Enum):
    company_name = 'company_name'
    user_position = 'user_position'
    role_group = 'role_group'


class RoleGroupShortResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    is_editable: Annotated[bool, Field(title='Is Editable')]


class RolePermissionResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    code_name: Annotated[str, Field(title='Code Name')]


class SearchApprovalProcessesLogsRequest(BaseConfigModel):
    page: Annotated[Optional[int], Field(title='Page')] = 1
    per_page: Annotated[Optional[int], Field(title='Per Page')] = 10
    filters: Optional[ApprovalProcessesLogsFilter] = None


class SearchApprovalProcessesRequest(BaseConfigModel):
    page: Annotated[Optional[int], Field(title='Page')] = 1
    per_page: Annotated[Optional[int], Field(title='Per Page')] = 10
    scope: ApprovalProcessesScope
    filters: Optional[ApprovalProcessesFilter] = None


class SearchByType(Enum):
    first_name = 'first_name'
    last_name = 'last_name'
    middle_name = 'middle_name'
    company_name = 'company_name'
    position_name = 'position_name'
    full_name = 'full_name'


class SetUsersForRoleGroupRequest(BaseConfigModel):
    users: Annotated[List[UUID], Field(title='Users')]


class UpdateRoleGroupRequest(BaseConfigModel):
    name: Annotated[str, Field(max_length=50, min_length=1, title='Name')]
    permissions: Annotated[List[UUID], Field(title='Permissions')]


class UpdateUserAccessSettingSchema(BaseConfigModel):
    user_oid: Annotated[UUID, Field(title='User Oid')]
    permissions: Annotated[List[UUID], Field(title='Permissions')]


class UserApproveResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[Optional[str], Field(title='First Name')] = None
    last_name: Annotated[Optional[str], Field(title='Last Name')] = None
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    position: Annotated[Optional[str], Field(title='Position')] = None
    full_name: Annotated[Optional[str], Field(title='Full Name')] = None
    updated_at: Annotated[datetime, Field(title='Updated At')]
    status: Optional[ApprovalProcessStatus] = 'pending'
    comment: Annotated[Optional[str], Field(title='Comment')] = None


class UserResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[Optional[str], Field(title='First Name')] = None
    last_name: Annotated[Optional[str], Field(title='Last Name')] = None
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    position: Annotated[Optional[str], Field(title='Position')] = None
    full_name: Annotated[Optional[str], Field(title='Full Name')] = None


class UserShortSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[Optional[str], Field(title='First Name')] = None
    last_name: Annotated[Optional[str], Field(title='Last Name')] = None
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    position: Annotated[Optional[str], Field(title='Position')] = None


class UserWithPermissionAndRoleGroupResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[str, Field(title='First Name')]
    last_name: Annotated[str, Field(title='Last Name')]
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    company_name: Annotated[Optional[str], Field(title='Company Name')] = None
    position: Annotated[str, Field(title='Position')]
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    permissions: Annotated[List[UUID], Field(title='Permissions')]
    role_group: Optional[RoleGroupShortResponse] = None


class UserWithPermissionResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[str, Field(title='First Name')]
    last_name: Annotated[str, Field(title='Last Name')]
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    company_name: Annotated[Optional[str], Field(title='Company Name')] = None
    position: Annotated[str, Field(title='Position')]
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    permissions: Annotated[List[UUID], Field(title='Permissions')]


class UserWithRoleGroupResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    first_name: Annotated[str, Field(title='First Name')]
    last_name: Annotated[str, Field(title='Last Name')]
    middle_name: Annotated[Optional[str], Field(title='Middle Name')] = None
    company_name: Annotated[Optional[str], Field(title='Company Name')] = None
    position: Annotated[str, Field(title='Position')]
    photo: Annotated[Optional[str], Field(title='Photo')] = None
    role_group: Optional[RoleGroupShortResponse] = None


class UsersFilterRequest(BaseConfigModel):
    search: Annotated[Optional[str], Field(title='Search')] = None
    search_by: Annotated[Optional[List[SearchByType]], Field(title='Search By')] = None
    company_name__in: Annotated[
        Optional[List[str]], Field(title='Company Name  In')
    ] = None
    position_name__in: Annotated[
        Optional[List[str]], Field(title='Position Name  In')
    ] = None
    role_group_name__in: Annotated[
        Optional[List[str]], Field(title='Role Group Name  In')
    ] = None
    role_group_oid__in: Annotated[
        Optional[List[UUID]], Field(title='Role Group Oid  In')
    ] = None
    entity_oids: Annotated[Optional[List[UUID]], Field(title='Entity Oids')] = None
    folder_oids: Annotated[Optional[List[UUID]], Field(title='Folder Oids')] = None
    permissions_code_names: Annotated[
        Optional[List[str]], Field(title='Permissions Code Names')
    ] = None


class ValidationError(BaseConfigModel):
    loc: Annotated[List[Union[str, int]], Field(title='Location')]
    msg: Annotated[str, Field(title='Message')]
    type: Annotated[str, Field(title='Error Type')]


class AccessSettingResponse(BaseConfigModel):
    users: Annotated[List[UserWithPermissionAndRoleGroupResponse], Field(title='Users')]
    role_groups: Annotated[List[RoleGroupShortResponse], Field(title='Role Groups')]


class ActionRequest(BaseConfigModel):
    action: ApproveAction
    comment: Annotated[Optional[str], Field(title='Comment')] = None


class AdditionalInfoSchema(BaseConfigModel):
    element: Optional[ElementSchema] = None
    camera_position: CameraPositionSchema
    camera_rotation: Optional[CameraRotationSchema] = None
    position_clipper_planes: Annotated[
        Optional[List[PositionClipperPlaneSchema]],
        Field(title='Position Clipper Planes'),
    ] = None


class ApprovalProcessLogResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    approval_process: ApprovalProcessResponseSchema
    actor: UserResponseSchema
    action: ApproveAction
    comment: Annotated[Optional[str], Field(title='Comment')] = None
    step: ApprovalStepLogResponse


class ApprovalProcessResponseShortSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    status: Annotated[Optional[str], Field(title='Status')] = 'in_progress'
    type: ApprovalProcessType
    version: Optional[EntityVersionResponseSchemaBase] = None
    creator: UserResponseSchema
    current_step: Optional[ApprovalStepShortResponse] = None
    number_of_steps: Annotated[int, Field(title='Number Of Steps')]


class ApprovalProcessTemplateFilterReqeust(BaseConfigModel):
    name: Annotated[Optional[str], Field(title='Name')] = None
    author: Annotated[Optional[str], Field(title='Author')] = None
    filters: Optional[Filters] = None
    page: Annotated[Optional[int], Field(title='Page')] = 1
    per_page: Annotated[Optional[int], Field(title='Per Page')] = 10


class ApprovalProcessTemplateResponseShortSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    steps_count: Annotated[int, Field(title='Steps Count')]
    creator: UserResponseSchema
    description: Annotated[Optional[str], Field(title='Description')] = None
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]


class ApprovalProcessTemplateStepResponseSchema(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    serial_number: Annotated[int, Field(title='Serial Number')]
    minimal_approves_number: Annotated[
        Optional[int], Field(title='Minimal Approves Number')
    ] = None
    approving_users: Annotated[
        Optional[List[Union[UUID, UserResponseSchema]]], Field(title='Approving Users')
    ] = None
    approving_groups: Annotated[
        Optional[List[UUID]], Field(title='Approving Groups')
    ] = None


class ApprovalStepFullResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    deadline: Annotated[Optional[date], Field(title='Deadline')] = None
    minimal_approves_number: Annotated[
        Optional[int], Field(title='Minimal Approves Number')
    ] = None
    status: Optional[ApprovalProcessStatus] = 'in_progress'
    approving_users: Annotated[
        List[UserApproveResponseSchema], Field(title='Approving Users')
    ]
    completed_at: Annotated[Optional[datetime], Field(title='Completed At')] = None
    updated_at: Annotated[Optional[datetime], Field(title='Updated At')] = None


class BlockEntityResponseSchema(BaseConfigModel):
    user: UserResponseSchema
    unlock_time: Annotated[Union[int, float], Field(title='Unlock Time')]


class BodyRemoveFilesFromStorageProjectsProjectOidEntitiesFilesRemoveFromStoragePost(
    BaseConfigModel
):
    files: Annotated[List[FileRequestSchema], Field(title='Files')]


class ChangeStatusIssueRequestSchema(BaseConfigModel):
    new_status: IssueStatusType
    fixed_version: Annotated[Optional[str], Field(title='Fixed Version')] = None


class CheckContentRequestSchema(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    type: EntityType
    version_number: Annotated[str, Field(title='Version Number')]
    files: Annotated[List[CheckFileSchema], Field(title='Files')]


class CheckObjectsForApprovalProcessRequest(BaseConfigModel):
    entities: Annotated[
        Optional[List[EntityToApproveRequest]], Field(title='Entities')
    ] = None
    folder_oids: Annotated[Optional[List[UUID]], Field(title='Folder Oids')] = None


class CreateApprovalProcessRequest(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    description: Annotated[Optional[str], Field(title='Description')] = None
    entities: Annotated[
        Optional[List[EntityToApproveRequest]], Field(title='Entities')
    ] = None
    folder_oids: Annotated[Optional[List[UUID]], Field(title='Folder Oids')] = None
    steps: Annotated[Optional[List[ApprovalStepRequest]], Field(title='Steps')] = None
    move_to_folder_oid: Annotated[Optional[UUID], Field(title='Move To Folder Oid')] = (
        None
    )
    template_oid: Annotated[Optional[UUID], Field(title='Template Oid')] = None


class CreateApprovalProcessResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    status: Annotated[Optional[str], Field(title='Status')] = 'in_progress'
    description: Annotated[Optional[str], Field(title='Description')] = None
    updated_at: Annotated[datetime, Field(title='Updated At')]
    entities: Annotated[List[EntityToApproveRequest], Field(title='Entities')]
    folder_oids: Annotated[Optional[List[UUID]], Field(title='Folder Oids')] = None
    steps: Annotated[
        Optional[List[CreateApprovalStepResponse]], Field(title='Steps')
    ] = None
    move_to_folder_oid: Annotated[Optional[UUID], Field(title='Move To Folder Oid')] = (
        None
    )
    template_oid: Annotated[Optional[UUID], Field(title='Template Oid')] = None


class CreateApprovalProcessTemplateResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    description: Annotated[Optional[str], Field(title='Description')] = None
    updated_at: Annotated[datetime, Field(title='Updated At')]
    created_at: Annotated[datetime, Field(title='Created At')]
    steps: Annotated[
        List[ApprovalProcessTemplateStepResponseSchema], Field(title='Steps')
    ]
    move_to_folder_oid: Annotated[Optional[UUID], Field(title='Move To Folder Oid')] = (
        None
    )


class CreateEntityRequestSchema(BaseConfigModel):
    name: Annotated[str, Field(title='Name')]
    type: EntityType
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]
    preview: Optional[FileRequestSchema] = None
    files: Annotated[List[FileRequestSchema], Field(title='Files')]
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}


class CreateEntityVersionResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    name: Annotated[str, Field(title='Name')]
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]
    parent_folder_oids: Annotated[List[UUID], Field(title='Parent Folder Oids')]


class CreateIssueRequestSchema(BaseConfigModel):
    assignee_oid: Annotated[UUID, Field(title='Assignee Oid')]
    title: Annotated[str, Field(max_length=150, title='Title')]
    message: Annotated[Optional[Message], Field(title='Message')] = None
    deadline: Annotated[date, Field(title='Deadline')]
    position: PositionSchema
    additional_info: Optional[AdditionalInfoSchema] = None
    files: Annotated[List[IssueFileRequestSchema], Field(title='Files')]


class EntitiesFilters(BaseConfigModel):
    is_deleted: Annotated[Optional[bool], Field(title='Is Deleted')] = None
    oid__in: Annotated[Optional[List[UUID]], Field(title='Oid  In')] = None
    creator_oid__in: Annotated[Optional[List[UUID]], Field(title='Creator Oid  In')] = (
        None
    )
    type__in: Annotated[Optional[List[EntityType]], Field(title='Type  In')] = None
    folder_oid__in: Annotated[Optional[List[UUID]], Field(title='Folder Oid  In')] = (
        None
    )
    version__in: Annotated[Optional[List[int]], Field(title='Version  In')] = None
    status__in: Annotated[Optional[List[str]], Field(title='Status  In')] = None


class EntityFullResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    name: Annotated[str, Field(title='Name')]
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]
    parent_folder_oids: Annotated[List[UUID], Field(title='Parent Folder Oids')]
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    preview: Optional[FileResponseSchema] = None
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    parent_folders: Annotated[List, Field(title='Parent Folders')]


class EntityResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    name: Annotated[str, Field(title='Name')]
    type: EntityType
    creator: UserResponseSchema
    current_version: EntityVersionResponseSchema
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    folder_oid: Annotated[UUID, Field(title='Folder Oid')]
    parent_folder_oids: Annotated[List[UUID], Field(title='Parent Folder Oids')]
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    preview: Optional[FileResponseSchema] = None
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None


class EntityShortSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    type: EntityType
    name: Annotated[str, Field(title='Name')]


class EntityVersionFullResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    version_number: Annotated[Optional[str], Field(title='Version Number')] = '1.0'
    created_at: Annotated[datetime, Field(title='Created At')]
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    comment: Annotated[Optional[str], Field(title='Comment')] = None
    size: Annotated[Optional[int], Field(title='Size')] = None
    entity_name: Annotated[Optional[str], Field(title='Entity Name')] = None
    type: Optional[EntityType] = None
    files: Annotated[List[FileResponseSchema], Field(title='Files')]
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None
    creator: Optional[UserShortSchema] = None


class EntityVersionListResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    version_number: Annotated[str, Field(title='Version Number')]
    created_at: Annotated[datetime, Field(title='Created At')]
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    comment: Annotated[Optional[str], Field(title='Comment')] = None
    size: Annotated[Optional[int], Field(title='Size')] = None
    user: Optional[UserShortSchema] = None
    entity_name: Annotated[Optional[str], Field(title='Entity Name')] = None
    type: Optional[EntityType] = None
    approval_process: Optional[ApprovalProcessResponseSchemaBase] = None


class EntityVersionRequestSchema(BaseConfigModel):
    files: Annotated[List[FileRequestSchema], Field(title='Files')]
    is_changes: Annotated[Optional[bool], Field(title='Is Changes')] = False
    comment: Annotated[Optional[Comment], Field(title='Comment')] = None


class ErrorCodeSchema(BaseConfigModel):
    code: ErrorCodeType


class FolderPathResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    path: Annotated[Optional[List[FolderResponseBase]], Field(title='Path')] = None


class FolderResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    creator: UserResponseSchema
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    parent_folder_oid: Annotated[Optional[UUID], Field(title='Parent Folder Oid')] = (
        None
    )
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}


class GetUsersFilterRequest(BaseConfigModel):
    filters: Optional[UsersFilterRequest] = None
    have_role_group: Annotated[Optional[bool], Field(title='Have Role Group')] = None
    without_me: Annotated[Optional[bool], Field(title='Without Me')] = None
    sort: Annotated[Optional[List[str]], Field(title='Sort')] = None


class HTTPValidationError(BaseConfigModel):
    detail: Annotated[Optional[List[ValidationError]], Field(title='Detail')] = None


class IssueResponseSchema(BaseConfigModel):
    oid: Annotated[Optional[UUID], Field(title='Oid')] = None
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    title: Annotated[str, Field(title='Title')]
    message: Annotated[Optional[str], Field(title='Message')] = None
    deadline: Annotated[date, Field(title='Deadline')]
    created_at: Annotated[Optional[datetime], Field(title='Created At')] = None
    fixed_version: Annotated[Optional[str], Field(title='Fixed Version')] = None
    position: PositionSchema
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    created_version: Annotated[Optional[str], Field(title='Created Version')] = None
    entity: Optional[EntityShortSchema] = None
    creator: UserShortSchema
    assignee: UserShortSchema
    status: IssueStatusBaseSchema
    files: Annotated[Optional[List[FileBaseSchema]], Field(title='Files')] = []
    new_statuses: Annotated[
        Optional[List[IssueStatusBaseSchema]], Field(title='New Statuses')
    ] = []


class IssueSchema(BaseConfigModel):
    oid: Annotated[Optional[UUID], Field(title='Oid')] = None
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    title: Annotated[str, Field(title='Title')]
    message: Annotated[Optional[str], Field(title='Message')] = None
    deadline: Annotated[date, Field(title='Deadline')]
    created_at: Annotated[Optional[datetime], Field(title='Created At')] = None
    fixed_version: Annotated[Optional[str], Field(title='Fixed Version')] = None
    position: PositionSchema
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    created_version: Annotated[Optional[str], Field(title='Created Version')] = None
    entity: Optional[EntityShortSchema] = None
    creator: UserShortSchema
    assignee: UserShortSchema
    status: IssueStatusBaseSchema
    files: Annotated[Optional[List[FileBaseSchema]], Field(title='Files')] = []


class ListIssueResponseSchema(BaseConfigModel):
    objects: Annotated[List[IssueSchema], Field(title='Objects')]


class PagePaginatorResponseApprovalProcessLogResponseSchema(BaseConfigModel):
    objects: Annotated[List[ApprovalProcessLogResponseSchema], Field(title='Objects')]
    current_page: Annotated[int, Field(title='Current Page')]
    total_pages: Annotated[int, Field(title='Total Pages')]
    page_size: Annotated[int, Field(title='Page Size')]
    total_items: Annotated[int, Field(title='Total Items')]


class PagePaginatorResponseApprovalProcessResponseShortSchema(BaseConfigModel):
    objects: Annotated[List[ApprovalProcessResponseShortSchema], Field(title='Objects')]
    current_page: Annotated[int, Field(title='Current Page')]
    total_pages: Annotated[int, Field(title='Total Pages')]
    page_size: Annotated[int, Field(title='Page Size')]
    total_items: Annotated[int, Field(title='Total Items')]


class PaginatedApprovalProcessTemplateResponse(BaseConfigModel):
    objects: Annotated[
        List[ApprovalProcessTemplateResponseShortSchema], Field(title='Objects')
    ]
    current_page: Annotated[int, Field(title='Current Page')]
    total_pages: Annotated[int, Field(title='Total Pages')]
    page_size: Annotated[int, Field(title='Page Size')]
    total_items: Annotated[int, Field(title='Total Items')]


class PaginatedResponseRolePermissionResponse(BaseConfigModel):
    results: Annotated[List[RolePermissionResponse], Field(title='Results')]
    next: Annotated[Optional[Next], Field(title='Next')] = None
    previous: Annotated[Optional[Previous], Field(title='Previous')] = None
    count: Annotated[int, Field(title='Count')]


class PaginatedResponseUserWithPermissionResponse(BaseConfigModel):
    results: Annotated[List[UserWithPermissionResponse], Field(title='Results')]
    next: Annotated[Optional[Next], Field(title='Next')] = None
    previous: Annotated[Optional[Previous], Field(title='Previous')] = None
    count: Annotated[int, Field(title='Count')]


class PaginatedResponseUserWithRoleGroupResponse(BaseConfigModel):
    results: Annotated[List[UserWithRoleGroupResponse], Field(title='Results')]
    next: Annotated[Optional[Next], Field(title='Next')] = None
    previous: Annotated[Optional[Previous], Field(title='Previous')] = None
    count: Annotated[int, Field(title='Count')]


class RoleGroupResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    permissions: Annotated[
        List[Optional[RolePermissionResponse]], Field(title='Permissions')
    ]
    is_editable: Annotated[bool, Field(title='Is Editable')]


class UpdateRoleGroupAccessSettingSchema(BaseConfigModel):
    role_group_oid: Annotated[UUID, Field(title='Role Group Oid')]
    users_with_custom_permissions: Annotated[
        Optional[List[UpdateUserAccessSettingSchema]],
        Field(title='Users With Custom Permissions'),
    ] = None


class ApprovalProcessTemplateFullResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    description: Annotated[Optional[str], Field(title='Description')] = None
    steps: Annotated[
        List[ApprovalProcessTemplateStepResponseSchema], Field(title='Steps')
    ]
    move_to_folder: Optional[FolderPathResponse] = None
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]


class ContentErrorSchema(BaseConfigModel):
    major: Annotated[bool, Field(title='Major')]
    business_error: Annotated[List[ErrorCodeSchema], Field(title='Business Error')]


class ContentFolderResponse(BaseConfigModel):
    folders: Annotated[List[FolderResponse], Field(title='Folders')]
    entities: Annotated[List[EntityResponseSchema], Field(title='Entities')]


class IssuePaginationResponseSchema(BaseConfigModel):
    objects: Annotated[List[IssueSchema], Field(title='Objects')]
    current_page: Annotated[Optional[int], Field(title='Current Page')] = None
    page_size: Annotated[Optional[int], Field(title='Page Size')] = None
    total_items: Annotated[Optional[int], Field(title='Total Items')] = None
    total_pages: Annotated[int, Field(title='Total Pages')]


class PaginatedResponseRoleGroupResponse(BaseConfigModel):
    results: Annotated[List[RoleGroupResponse], Field(title='Results')]
    next: Annotated[Optional[Next], Field(title='Next')] = None
    previous: Annotated[Optional[Previous], Field(title='Previous')] = None
    count: Annotated[int, Field(title='Count')]


class RetrieveFolderResponse(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    updated_at: Annotated[datetime, Field(title='Updated At')]
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    creator: UserResponseSchema
    project_oid: Annotated[UUID, Field(title='Project Oid')]
    parent_folder_oid: Annotated[Optional[UUID], Field(title='Parent Folder Oid')] = (
        None
    )
    additional_info: Annotated[
        Optional[Dict[str, Any]], Field(title='Additional Info')
    ] = {}
    content: ContentFolderResponse


class UpdateAccessSettingRequestSchema(BaseConfigModel):
    update_role_groups: Annotated[
        Optional[List[UpdateRoleGroupAccessSettingSchema]],
        Field(
            description='Ролевые группы на выдачу доступа', title='Update Role Groups'
        ),
    ] = None
    update_users: Annotated[
        Optional[List[UpdateUserAccessSettingSchema]],
        Field(description='Пользователи(UUID) на выдачу доступа', title='Update Users'),
    ] = None
    remove_role_groups: Annotated[
        Optional[List[UUID]],
        Field(
            description='Ролевые группы (UUID) на удаление доступа',
            title='Remove Role Groups',
        ),
    ] = None
    remove_users: Annotated[
        Optional[List[UUID]],
        Field(
            description='Пользователи (UUID) на удаление доступа', title='Remove Users'
        ),
    ] = None


class ApprovalProcessFullResponseSchema(BaseConfigModel):
    oid: Annotated[UUID, Field(title='Oid')]
    name: Annotated[str, Field(title='Name')]
    created_at: Annotated[datetime, Field(title='Created At')]
    status: Annotated[Optional[str], Field(title='Status')] = 'in_progress'
    description: Annotated[Optional[str], Field(title='Description')] = None
    updated_at: Annotated[datetime, Field(title='Updated At')]
    creator: UserResponseSchema
    template: Optional[ApprovalProcessTemplateResponseSchemaBase] = None
    move_to_folder: Optional[FolderPathResponse] = None
    approval_objects: ContentFolderResponse
    steps: Annotated[List[ApprovalStepResponseSchemaBase], Field(title='Steps')]
    current_step: Optional[ApprovalStepFullResponseSchema] = None
    deleted_at: Annotated[Optional[datetime], Field(title='Deleted At')] = None
    remover: Optional[UserResponseSchema] = None


class ContentCheckResponseSchema(BaseConfigModel):
    type: EntityType
    validation: ContentValidationType
    error: Optional[ContentErrorSchema] = None


CreateFolderRequest.model_rebuild()
