{% set docstring_indent = '    ' %}
from http import HTTPStatus
from typing import Any, Optional, List, Dict
from my_codegen.http_clients.api_client import ApiClient
from {{ models_import_path }} import {{ imports | join(', ') }}

import allure


class {{ class_name }}(ApiClient):
    _service = "{{ service_name }}"

    {% for method in methods %}
    @allure.step('{{ (method.description if method.description else method.name) | replace("\n", "\n" + docstring_indent) | replace("\"", "\\\"") }}')
    def {{ method.name }}(self,
                           {%- for param in method.method_parameters %}
                           {{ param }},
                           {%- endfor %}
                           {%- if method.http_method == 'GET' %}
                           query: Optional[{{ method.query_type }}] = None,
                           {%- else %}
                             {% if method.payload_type %}
                           payload: {{ method.payload_type }},
                             {% else %}
                           payload: Optional[Any] = None,
                             {% endif %}
                           {%- endif %}
                           status: HTTPStatus = HTTPStatus.{{ method.expected_status }}) -> {{ method.return_type }}:
        path = f"{{ method.path }}"
        {%- if method.http_method == 'GET' %}
        r_json = self._get(
            path=self._service + path,
            params=query.dict() if query else None,
            expected_status=status
        )
        {%- elif method.http_method in ['POST', 'PUT', 'PATCH', 'DELETE'] %}
            {% if method.payload_type and method.payload_type.startswith('List[') %}
        r_json = self._{{ method.http_method.lower() }}(
            path=self._service + path,
            payload=[item.dict() for item in payload],
            expected_status=status
        )
            {% elif method.payload_type %}
                {%- if method.payload_type == 'dict' %}
        r_json = self._{{ method.http_method.lower() }}(
            path=self._service + path,
            payload=payload,
            expected_status=status
        )
                {%- else %}
        r_json = self._{{ method.http_method.lower() }}(
            path=self._service + path,
            payload=payload.dict() if payload else None,
            expected_status=status
        )
                {%- endif %}
            {% else %}
        r_json = self._{{ method.http_method.lower() }}(
            path=self._service + path,
            expected_status=status
        )
            {% endif %}
        {%- endif %}

        {%- if method.return_type != 'Any' %}
            {%- if method.return_type.startswith('List[') %}
        return [{{ method.return_type[5:-1] }}(**item) for item in r_json] if status == HTTPStatus.{{ method.expected_status }} else r_json
            {%- else %}
        return {{ method.return_type }}.model_construct(**r_json) if status == HTTPStatus.{{ method.expected_status }} else r_json
            {%- endif %}
        {%- else %}
        return r_json
        {%- endif %}
    {% endfor %}
